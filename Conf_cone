/* Código para gerar uma nova configuração inicial para a BSACG */

#include <stdio.h>
#include <string.h>
#include <math.h>

int main ()
{
    FILE *ENT; /* Arquivo de entrada contendo a sequência de resíduos da proteína */
    FILE *SAI; /* Arquivo de saída com a configuração nova */
    char RES[3]; /* Vetor para armazenar o resíduo lido no arquivo de entrada */
    char GLU[] = "GLU", ASP[] = "ASP", HIS[] = "HIS", LYS[] = "LYS", ARG[] = "ARG", MET[] = "MET", PROT[] = "BSACG"; /* Resíduos existentes */
    int N; /* Quantidade de resíduos na proteína */
    int L; /* Identificador da molécula no .gro */
    int cont; /* Contador */
    int RES1, RES2, RES3, RES4, RES5; /* Comparativos entre resíduos */
    double X, Y, Z; /* Coordenadas de cada resíduo */
    double boxl; /* Largura da caixa */
    double delta; /* Incremento em Z */

    N = 583;
    L = 1;
    boxl = 40.0;
    Z = 1.0;
    X = (boxl/2.0) + ((Z - 1.0)/2.0)*cos(Z - 1.0);
    Y = (boxl/2.0) + ((Z - 1.0)/2.0)*sin(Z - 1.0);
    delta = 0.2;

    /* Abertura do arquivo de entrada e criação do de saída */

    ENT = fopen("primstruc.pdb", "r");
    SAI = fopen("conf_nova.gro", "w");

    fprintf(SAI, "BSA coarse-grained\n"); /* Titulo do arquivo .gro */
    fprintf(SAI, "%5d\n", N); /* Quantidade de resíduos */

    for(cont = 1;cont <= N; cont++)
    {
        fscanf(ENT, "%s", RES);
        /* printf("%s ", RES); */
        RES1 = strcmp(RES, GLU);
        RES2 = strcmp(RES, ASP);
        RES3 = strcmp(RES, HIS);
        RES4 = strcmp(RES, LYS);
        RES5 = strcmp(RES, ARG);

        if(RES1 == 0 || RES2 == 0) /* Checando se o resíduo lido é o ácido glutâmico ou aspergina */
        {
            fprintf(SAI, "%5d%-5s%5s%5d%8.3lf%8.3lf%8.3lf\n", L, PROT, GLU, cont, X, Y, Z);
        }
        else if(RES3 == 0 || RES4 == 0 || RES5 == 0) /* Checando se o resíduo lido é histeína, lisina ou argenina */
        {
            fprintf(SAI, "%5d%-5s%5s%5d%8.3lf%8.3lf%8.3lf\n", L, PROT, HIS, cont, X, Y, Z);
        }
        else
        {
            fprintf(SAI, "%5d%-5s%5s%5d%8.3lf%8.3lf%8.3lf\n", L, PROT, MET, cont, X, Y, Z);
        }

        Z = Z + delta;
        X = (boxl/2.0) + ((Z - 1.0)/2.0)*cos(Z - 1.0);
        Y = (boxl/2.0) + ((Z - 1.0)/2.0)*sin(Z - 1.0);

        if(delta > 0.04)
        {
            delta = delta - 0.001;
        }
        else
        {
            delta = 0.04;
        }
    }

    fprintf(SAI, "%10.5lf%10.5lf%10.5lf\n", boxl, boxl, boxl);
    fclose(SAI);
    fclose(ENT);

    system("editconf -f conf_nova.gro -o bsa_cone.gro");

    return 0;
}
